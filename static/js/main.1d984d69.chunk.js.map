{"version":3,"sources":["Square.js","BoardComponent.js","BoardContainer.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","style","backgroundColor","display","className","onClick","handleClick","BoardComponent","data","id","colorDisplay","resetHandler","resetContext","messageDisplay","modeButtons","modeHandler","selected","src_Square","displays","colors","Board","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","mode","pickedColor","bind","assertThisInitialized","updateDisplays","updateColors","generateRandomColors","updatePickedColor","pickColer","updateModeButtons","mdoe","push","i","setState","reset","e","target","textContent","Math","floor","random","num","arr","randomColor","clickedColor","length","colos","src_BoardComponent","React","Component","App","BoardContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1d984d69.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Square(props) {\n    return (<div style={{backgroundColor: props.backgroundColor, display: props.display}} className=\"square\" onClick={props.handleClick}></div>);\n}\n\nexport default Square;\n","import React from 'react';\nimport Square from './Square'\nimport './App.css'\n\nfunction BoardComponent(props) {\n    return (\n        <div>\n            <h1 style={{backgroundColor: props.data.backgroundColor}}>The Great\n                <span id=\"colorDisplay\">{props.data.colorDisplay}</span>\n                Gussing Game\n            </h1>\n            <div id=\"stripe\">\n                <button onClick={props.resetHandler}>{props.data.resetContext}</button>\n                <span id=\"message\">{props.data.messageDisplay}</span>\n                <button className={props.data.modeButtons[0]} onClick={props.modeHandler}>EASY</button>\n                <button className={props.data.modeButtons[1]} selected=\"selected\" onClick={props.modeHandler}>HARD</button>\n            </div>\n            <div id=\"container\">\n                <Square display={props.data.displays[0]} backgroundColor={props.data.colors[0]} handleClick={props.handleClick}></Square>\n                <Square display={props.data.displays[1]} backgroundColor={props.data.colors[1]} handleClick={props.handleClick}></Square>\n                <Square display={props.data.displays[2]} backgroundColor={props.data.colors[2]} handleClick={props.handleClick}></Square>\n                <Square display={props.data.displays[3]} backgroundColor={props.data.colors[3]} handleClick={props.handleClick}></Square>\n                <Square display={props.data.displays[4]} backgroundColor={props.data.colors[4]} handleClick={props.handleClick}></Square>\n                <Square display={props.data.displays[5]} backgroundColor={props.data.colors[5]} handleClick={props.handleClick}></Square>\n            </div>\n        </div>\n    );\n}\n\nexport default BoardComponent;\n","import React from 'react';\nimport BoardComponent from './BoardComponent'\n\nclass Board extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            mode: 6,\n            colors: [],\n            displays: [],\n            colorDisplay: \"\",\n            messageDisplay: \"\",\n            resetContext: \"\",\n            pickedColor: \"\",\n            backgroundColor: \"\",\n            modeButtons: []\n        }\n        this.handleClick = this.handleClick.bind(this)\n        this.modeHandler = this.modeHandler.bind(this)\n        this.resetHandler = this.resetHandler.bind(this)\n    }\n\n    reset() {\n        let updateDisplays = [];\n        let updateColors = this.generateRandomColors(this.state.mode);\n        let updatePickedColor = this.pickColer(updateColors);\n        let updateModeButtons = [];\n        if (this.state.mdoe === 3) {\n            updateModeButtons.push(\"selected\");\n            updateModeButtons.push(\"\");\n        }\n        else {\n            updateModeButtons.push(\"\");\n            updateModeButtons.push(\"selected\");\n        }\n        for (var i = 0; i < 6; i++) {\n            if (updateColors[i]) {\n                updateDisplays[i] = \"block\";\n            }\n            else {\n                updateDisplays[i] = \"none\";\n            }\n        }\n        this.setState({\n            colors: updateColors,\n            pickedColor: updatePickedColor,\n            colorDisplay: updatePickedColor,\n            backgroundColor: \"steelblue\",\n            resetContext: \"New Colors\",\n            messageDisplay: \"\",\n            displays: updateDisplays\n        })\n    }\n\n    resetHandler() {\n        this.reset();\n    }\n\n    modeHandler(e) {\n        const button = e.target;\n        button.textContent === \"EASY\" ? this.setState({mode: 3}, this.reset) : this.setState({mode: 6}, this.reset);\n    }\n\n    pickColer(colors) {\n        var random = Math.floor(Math.random() * this.state.mode);\n        return colors[random];\n    }\n\n    generateRandomColors(num) {\n        var arr = [];\n        for (var i = 0; i < num; i++) {\n            arr.push(this.randomColor());\n        }\n        return arr;\n    }\n\n    randomColor() {\n        var r = Math.floor(Math.random() * 256);\n        var g = Math.floor(Math.random() * 256);\n        var b = Math.floor(Math.random() * 256);\n        return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n    }\n\n    componentDidMount() {\n        this.reset();\n    }\n\n    handleClick(e) {\n        let clickedColor = e.target.style.backgroundColor;\n        let updateColors = [];\n        if (clickedColor === this.state.pickedColor) {\n            for (let i = 0; i < this.state.colors.length; i++) {\n                updateColors.push(clickedColor);\n            }\n            this.setState({\n                messageDisplay: \"Correct!\",\n                resetContext: \"Play Again?\",\n                backgroundColor: clickedColor,\n                colors: updateColors\n            });\n        }\n        else {\n            updateColors = this.state.colors;\n            for (let i = 0; i < this.state.colors.length; i++) {\n                if (this.state.colors[i] === clickedColor) {\n                    updateColors[i] = \"#232323\";\n                }\n            }\n            this.setState({\n                messageDisplay: \"Try Again\",\n                colos: updateColors\n            });\n        }\n\n    }\n\n    render() {\n        return (\n            <BoardComponent data={this.state} handleClick={this.handleClick} modeHandler={this.modeHandler} resetHandler={this.resetHandler}/>\n        )\n    }\n\n}\n\nexport default Board;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Board from './BoardContainer'\n\nclass App extends Component {\n    render() {\n        return (\n            <Board />\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}